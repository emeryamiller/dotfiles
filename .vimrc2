set nocompatible
" Vundle config and bundle definitians
filetype off

"set rtp+=~/.vim/bundle/vundle/
"call vundle#rc()

" let Vundle manage Vundle
"Bundle 'gmarik/vundle'

" Include user's local vim config
let mapleader = ','

set number
set ruler
syntax on

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
"eol:¬,
set list listchars=tab:▸\ ,trail:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Status bar
set laststatus=2

" Set color options
set t_Co=256

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" NERDTree configuration
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Procfile,Guardfile,Vagrantfile,Thorfile,config.ru,*.rabl,*.rake} set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

au BufNewFile,BufRead *.hamlc set ft=haml

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

  " Easier moving in tabs and windows
  map <C-J> <C-W>j
  map <C-K> <C-W>k
  map <C-L> <C-W>l
  map <C-H> <C-W>h

  " Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

  " visual shifting (does not exit Visual mode)
  vnoremap < <gv
  vnoremap > >gv

  "set hidden allows navigation between unsaved buffers without an error
  set hidden

  "stop highlighting with esc or enter"
  nnoremap <CR> :noh<CR><CR>
  nnoremap <ESC> :noh<CR><ESC>


  "Remap Q so it doesn't enter e mode, but triggers macro recording instead"
  nnoremap Q q
" }


  nnoremap <Leader>h :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<CR>

" Add visual mode dot command
vnoremap . :normal .

" Remove whitespace from a file
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

autocmd BufWritePre *.* :call Preserve("%s/\\s\\+$//e")
